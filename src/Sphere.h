#include <vector>
#include <map>
#include <array>

class Sphere
{
public:
    /**
     *  Initializes a Sphere generated using icosahedron division.
     *  @param radius - The desired radius of this spherical icosahedron.
     */
    Sphere(float radius);

    /**
     *  A basic copy operation on the Sphere object.
     *  Copying an object doesn't make sense, so we just delete it.
     */
    Sphere(const Sphere&) = delete;

    /**
     *  A basic move operation on the Sphere object.
     *  Moving an object doesn't make much sense, so we just delete it.
     */
    Sphere& operator=(const Sphere&) = delete;

    /**
     *  Deconstructor for the Sphere object.
     */
    ~Sphere();

    /**
     *  Retrieves the indices generated by this Sphere object.
     */
    std::vector<unsigned int> GetIndices();

    /**
     *  Retrieves the vertices generated by this Sphere object.
     */
    std::vector<float> GetVertices();

    /**
     *  Returns this sphere's radius.
     *  @return The radius of the current sphere; defined at creation.
     */
    float GetRadius();

    /**
     *  Divides the current icosahedron into more triangles.
     */
    void Divide();

    /**
     *  Adds a new vertex to the back of the vertices list.
     *  @param map - The vertex pair map to be checked for existing index pairings.
     *  @param one - The start vertex of the mid-point to be calculated.
     *  @param two - The end vertex of the mid-point to be calculated.
     *  @return The index of the existing midpoint, or size() - 1 if a new vertex was added to the end.
     */
    unsigned int MidPoint
    (
        std::map<std::pair<unsigned int, unsigned int>, unsigned int>* map, 
        unsigned int one, 
        unsigned int two
    );
    
private:
    // The list of unique vertices for the current shape.
    std::vector<std::array<float,3>> vertices;

    // A list of the triangle indices formed from this shape's vertices.
    std::vector<std::array<unsigned int,3>> indices;

    // The spherical radius of this icosahedron.
    float radius;

    // Counter for unique keys
    unsigned int counter;
};